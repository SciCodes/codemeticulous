"""
generated by datamodel-codegen (schema/datacite/schema45.json)
with options:
    --output-model-type pydantic_v2.BaseModel \
    --field-constraints \
    --allow-population-by-field-name \
    --collapse-root-models \
    --use-default-kwarg \
    --enum-field-as-literal one \
    --use-field-description \
    --disable-timestamp

MANUAL CHANGES:
- add ByAliasExcludeNoneMixin to DataciteV45
- add identifier and identifierType to Container, this is included in examples
  for schema 4.5 but not in the schema itself..
"""

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, List, Literal, Optional, Union
from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel

from codemeticulous.mixins import ByAliasExcludeNoneMixin


class Event(Enum):
    hide = "hide"
    register = "register"
    publish = "publish"


class Publisher(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    name: str
    publisherIdentifier: Optional[str] = None
    publisherIdentifierScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None
    lang: Optional[str] = None


class Subject(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    subject: str
    subjectScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None
    valueUri: Optional[AnyUrl] = None
    classificationCode: Optional[str] = None
    lang: Optional[str] = None


class AlternateIdentifier(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    alternateIdentifier: str
    alternateIdentifierType: str


class NumberType(Enum):
    Article = "Article"
    Chapter = "Chapter"
    Report = "Report"
    Other = "Other"


class RightsListItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    rights: Optional[str] = None
    rightsUri: Optional[AnyUrl] = None
    rightsIdentifier: Optional[str] = None
    rightsIdentifierScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None
    lang: Optional[str] = None


class Container(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    identifier: Optional[str] = None
    identifierType: Optional[RelatedIdentifierType] = None
    type: Optional[str] = None
    title: Optional[str] = None
    firstPage: Optional[str] = None


class NameType(Enum):
    Organizational = "Organizational"
    Personal = "Personal"


class NameIdentifier(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    nameIdentifier: str
    nameIdentifierScheme: str
    schemeUri: Optional[AnyUrl] = None


class AffiliationItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    name: str
    affiliationIdentifier: Optional[str] = None
    affiliationIdentifierScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None


class Person(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    nameType: Optional[NameType] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    nameIdentifiers: Optional[List[NameIdentifier]] = None
    affiliation: Optional[List[AffiliationItem]] = None
    lang: Optional[str] = None


class Creator(Person):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class ContributorType(Enum):
    ContactPerson = "ContactPerson"
    DataCollector = "DataCollector"
    DataCurator = "DataCurator"
    DataManager = "DataManager"
    Distributor = "Distributor"
    Editor = "Editor"
    HostingInstitution = "HostingInstitution"
    Producer = "Producer"
    ProjectLeader = "ProjectLeader"
    ProjectManager = "ProjectManager"
    ProjectMember = "ProjectMember"
    RegistrationAgency = "RegistrationAgency"
    RegistrationAuthority = "RegistrationAuthority"
    RelatedPerson = "RelatedPerson"
    Researcher = "Researcher"
    ResearchGroup = "ResearchGroup"
    RightsHolder = "RightsHolder"
    Sponsor = "Sponsor"
    Supervisor = "Supervisor"
    WorkPackageLeader = "WorkPackageLeader"
    Other = "Other"


class TitleType(Enum):
    AlternativeTitle = "AlternativeTitle"
    Subtitle = "Subtitle"
    TranslatedTitle = "TranslatedTitle"
    Other = "Other"


class DateType(Enum):
    Accepted = "Accepted"
    Available = "Available"
    Copyrighted = "Copyrighted"
    Collected = "Collected"
    Created = "Created"
    Issued = "Issued"
    Submitted = "Submitted"
    Updated = "Updated"
    Valid = "Valid"
    Withdrawn = "Withdrawn"
    Other = "Other"


class ResourceTypeGeneral(Enum):
    Audiovisual = "Audiovisual"
    Book = "Book"
    BookChapter = "BookChapter"
    Collection = "Collection"
    ComputationalNotebook = "ComputationalNotebook"
    ConferencePaper = "ConferencePaper"
    ConferenceProceeding = "ConferenceProceeding"
    DataPaper = "DataPaper"
    Dataset = "Dataset"
    Dissertation = "Dissertation"
    Event = "Event"
    Image = "Image"
    Instrument = "Instrument"
    InteractiveResource = "InteractiveResource"
    Journal = "Journal"
    JournalArticle = "JournalArticle"
    Model = "Model"
    OutputManagementPlan = "OutputManagementPlan"
    PeerReview = "PeerReview"
    PhysicalObject = "PhysicalObject"
    Preprint = "Preprint"
    Report = "Report"
    Service = "Service"
    Software = "Software"
    Sound = "Sound"
    Standard = "Standard"
    StudyRegistration = "StudyRegistration"
    Text = "Text"
    Workflow = "Workflow"
    Other = "Other"


class RelatedIdentifierType(Enum):
    ARK = "ARK"
    arXiv = "arXiv"
    bibcode = "bibcode"
    DOI = "DOI"
    EAN13 = "EAN13"
    EISSN = "EISSN"
    Handle = "Handle"
    IGSN = "IGSN"
    ISBN = "ISBN"
    ISSN = "ISSN"
    ISTC = "ISTC"
    LISSN = "LISSN"
    LSID = "LSID"
    PMID = "PMID"
    PURL = "PURL"
    UPC = "UPC"
    URL = "URL"
    URN = "URN"
    w3id = "w3id"


class RelationType(Enum):
    IsCitedBy = "IsCitedBy"
    Cites = "Cites"
    IsCollectedBy = "IsCollectedBy"
    Collects = "Collects"
    IsSupplementTo = "IsSupplementTo"
    IsSupplementedBy = "IsSupplementedBy"
    IsContinuedBy = "IsContinuedBy"
    Continues = "Continues"
    IsDescribedBy = "IsDescribedBy"
    Describes = "Describes"
    HasMetadata = "HasMetadata"
    IsMetadataFor = "IsMetadataFor"
    HasVersion = "HasVersion"
    IsVersionOf = "IsVersionOf"
    IsNewVersionOf = "IsNewVersionOf"
    IsPartOf = "IsPartOf"
    IsPreviousVersionOf = "IsPreviousVersionOf"
    IsPublishedIn = "IsPublishedIn"
    HasPart = "HasPart"
    IsReferencedBy = "IsReferencedBy"
    References = "References"
    IsDocumentedBy = "IsDocumentedBy"
    Documents = "Documents"
    IsCompiledBy = "IsCompiledBy"
    Compiles = "Compiles"
    IsVariantFormOf = "IsVariantFormOf"
    IsOriginalFormOf = "IsOriginalFormOf"
    IsIdenticalTo = "IsIdenticalTo"
    IsReviewedBy = "IsReviewedBy"
    Reviews = "Reviews"
    IsDerivedFrom = "IsDerivedFrom"
    IsSourceOf = "IsSourceOf"
    IsRequiredBy = "IsRequiredBy"
    Requires = "Requires"
    IsObsoletedBy = "IsObsoletedBy"
    Obsoletes = "Obsoletes"


class RelatedObject(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    relationType: RelationType
    relatedMetadataScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None
    schemeType: Optional[str] = None
    resourceTypeGeneral: Optional[ResourceTypeGeneral] = None


class RelationType1(Enum):
    HasMetadata = "HasMetadata"
    IsMetadataFor = "IsMetadataFor"


class RelatedObjectIf(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    relationType: Optional[RelationType1] = None


class RelatedObjectElse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    relatedMetadataScheme: Optional[Any] = None
    schemeUri: Optional[Any] = None
    schemeType: Optional[Any] = None


class DescriptionType(Enum):
    Abstract = "Abstract"
    Methods = "Methods"
    SeriesInformation = "SeriesInformation"
    TableOfContents = "TableOfContents"
    TechnicalInfo = "TechnicalInfo"
    Other = "Other"


class GeoLocationPoint(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    pointLongitude: float = Field(..., ge=-180.0, le=180.0)
    pointLatitude: float = Field(..., ge=-90.0, le=90.0)


class FunderIdentifierType(Enum):
    ISNI = "ISNI"
    GRID = "GRID"
    Crossref_Funder_ID = "Crossref Funder ID"
    ROR = "ROR"
    Other = "Other"


class Types(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    resourceType: Optional[str] = None
    resourceTypeGeneral: ResourceTypeGeneral


class Title(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    title: str
    titleType: Optional[TitleType] = None
    lang: Optional[str] = None


class DateModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    date: Union[str, date]
    dateType: DateType
    dateInformation: Optional[str] = None


class RelatedIdentifier(RelatedObject):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    relatedIdentifier: str
    relatedIdentifierType: RelatedIdentifierType
    relationType: RelationType


class RelatedItemIdentifier(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    relatedItemIdentifier: str
    relatedItemIdentifierType: RelatedIdentifierType


class Description(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    description: str
    descriptionType: DescriptionType
    lang: Optional[str] = None


class GeoLocationBox(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    westBoundLongitude: float = Field(..., ge=-180.0, le=180.0)
    eastBoundLongitude: float = Field(..., ge=-180.0, le=180.0)
    southBoundLatitude: float = Field(..., ge=-90.0, le=90.0)
    northBoundLatitude: float = Field(..., ge=-90.0, le=90.0)


class GeoLocationPolygonItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    polygonPoint: Optional[GeoLocationPoint] = None
    inPolygonPoint: Optional[GeoLocationPoint] = None


class GeoLocation(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    geoLocationPlace: Optional[str] = None
    geoLocationPoint: Optional[GeoLocationPoint] = None
    geoLocationBox: Optional[GeoLocationBox] = None
    geoLocationPolygon: Optional[List[GeoLocationPolygonItem]] = None


class FundingReference(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    funderName: str
    funderIdentifier: Optional[str] = None
    funderIdentifierType: Optional[FunderIdentifierType] = None
    awardNumber: Optional[str] = None
    awardUri: Optional[AnyUrl] = None
    awardTitle: Optional[str] = None


class Contributor(Person):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contributorType: ContributorType
    name: str


class RelatedItem(RelatedObject):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    relatedItemIdentifier: Optional[RelatedItemIdentifier] = None
    relatedItemType: ResourceTypeGeneral
    creators: Optional[List[Creator]] = None
    contributors: Optional[List[Contributor]] = None
    titles: List[Title] = Field(..., min_length=1)
    publicationYear: Optional[str] = Field(default=None, pattern="^[0-9]{4}$")
    volume: Optional[str] = None
    issue: Optional[str] = None
    firstPage: Optional[str] = None
    lastPage: Optional[str] = None
    edition: Optional[str] = None
    publisher: Optional[str] = None
    number: Optional[str] = None
    numberType: Optional[NumberType] = None
    relationType: RelationType


class DataciteV45(ByAliasExcludeNoneMixin, BaseModel):
    model_config = ConfigDict(
        extra="forbid",
        populate_by_name=True,
    )
    doi: Optional[str] = Field(default=None, pattern="^10[.][0-9]{4,9}[/][^\\s]+$")
    prefix: Optional[str] = Field(default=None, pattern="^10[.][0-9]{4,9}$")
    suffix: Optional[str] = Field(default=None, pattern="^[^\\s]+$")
    event: Optional[Event] = None
    url: Optional[AnyUrl] = None
    types: Types
    creators: List[Creator] = Field(..., min_length=1)
    titles: List[Title] = Field(..., min_length=1)
    publisher: Publisher
    publicationYear: str = Field(..., pattern="^[0-9]{4}$")
    subjects: Optional[List[Subject]] = None
    contributors: Optional[List[Contributor]] = None
    dates: Optional[List[DateModel]] = None
    language: Optional[str] = None
    alternateIdentifiers: Optional[List[AlternateIdentifier]] = None
    relatedIdentifiers: Optional[List[RelatedIdentifier]] = None
    relatedItems: Optional[List[RelatedItem]] = None
    sizes: Optional[List[str]] = None
    formats: Optional[List[str]] = None
    version: Optional[str] = None
    rightsList: Optional[List[RightsListItem]] = None
    descriptions: Optional[List[Description]] = None
    geoLocations: Optional[List[GeoLocation]] = None
    fundingReferences: Optional[List[FundingReference]] = None
    schemaVersion: Literal["http://datacite.org/schema/kernel-4"] = (
        "http://datacite.org/schema/kernel-4"
    )
    container: Optional[Container] = None
